{
  
    
        "post0": {
            "title": "Fileuploadtest",
            "content": "Submit File",
            "url": "http://localhost:4100/Tri3/2024/02/07/fileuploadtest.html",
            "relUrl": "/2024/02/07/fileuploadtest.html",
            "date": " • Feb 7, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "401error",
            "content": "401 Error You are not authenticated please login .",
            "url": "http://localhost:4100/Tri3/2024/01/31/401error.html",
            "relUrl": "/2024/01/31/401error.html",
            "date": " • Jan 31, 2024"
        }
        
    
  
    
        ,"post2": {
            "title": "Datatable",
            "content": "Name ID . Enter the UID you want to delete . Delete Account . Enter UID for user refrence . Enter the new Password . Enter the new name . Update Account .",
            "url": "http://localhost:4100/Tri3/2024/01/30/DataTable.html",
            "relUrl": "/2024/01/30/DataTable.html",
            "date": " • Jan 30, 2024"
        }
        
    
  
    
        ,"post3": {
            "title": "CPT Project Plan",
            "content": "Overview . Our project idea came from last trimester’s joke button page. We found many button CSS designs and modified them to create our own. As a result, we thought that a great idea for our CPT project would be to create a website where users can save and edit designs, with the aim being an online button editor that simplifies complicated parts of CSS such as animations and box shadows. Our website would also have a like/dislike system that collects user data and displays the best designs for users to see. Users would have the option of making designs public and private and sharing designs with others. . Purpose . In the domain of web design, where the pursuit of aesthetically pleasing layouts intersects with the nuanced orchestration of cascading style sheets (CSS), the endeavor to efficiently unearth and implement creative concepts can often resemble a traversal through a convoluted labyrinth. Recognizing the inherent value of time, our primary objective is to furnish a guiding beacon—a streamlined pathway, if you will—to effortlessly unveil designs and master the intricacies of CSS, all without the exhaustive investment of protracted periods. Envision this as a digital compass, directing you towards a seamless fusion of creativity and code, thereby rendering the process an engaging exploration rather than an arduous enigma. . Frontend . Page Designs . Initial Design . Canva: . Main Page . HTML + CSS Editor . Our design consists of an HTML and CSS editor in the page. This seems somewhat redundant, since someone can create their design on a local file and upload, however this funtion comes with several benefits. . Users who don’t want to create a new project file can quickly test lines in a pinch | HTML and CSS editors allow people to visualize code written by helper tools such as animation or box shadow | When viewing other designs and wishing to implement code, allows for easy reference and copying | . Security A potential issue with an HTML editor is that an attacker can easily use the HTML editor to gain access to data stored on our website. While we trust the other people at our school, and are not concerned with people viewing so called private designs while our website is in the testing phase, it is important to ensure that somebody cannot inject code to access private data or destroy our website. This issues arises as if HTML code that is inputted is displayed on our website, anybody essentially has full control over our website. Potential fixes: . Find a workaround that doesn’t require HTML. This would be difficult but ideal | Somehow encapsulate the provided HTML in a separate container that prevents it from having access to the rest of the code and only displays within itself. This might still have loopholes, and requires lots of research, but is what we strive for. | other solution: ban javascript, but removes functionality | . Private versus Public designs . Our website will allow users to make public designs for sharing, and private designs as references for themselves later. A diagram of how the database will handle this is show below. . Animation . The plan for animations is that the user will be able to select an element, then select the path that the element will travel in the page | There will also be numerous types of animations to manipulate elements, akin to google slide element animations | There will also be “mix-and-matchable” buttons and animations -&gt; allows for the use of certain button designs and a different animation | . . Box Shadow . Box shadow is pretty complicated, as a result, we plan to use a menu and presets to simplify the process | Generally, box shadow is a string of 20 numbers or so. This is overly complex so what we plan on doing is having a scrolling menu that indicates each number with its purpose for easier modification | . . Finding Designs . we will tag will the designs with certain words/hashtags in smaller font at the top of each page and create a search function (more specifics will be researched later) | . The display page for one design as shown below: . . The search page listing will look like this: . . Like and Dislike designs . CSS button to upvote/downvote designs +/- 1 vote | score for a single design will be stored in the backend database | . Others . Other plans will be placed here as we come up with them | . Backend . User Accounts, Database . we will have a mySQL database for the website to hold different user accounts they can log in with | account login will include username and password | each account will have certain stored properties in the database such as different profile settings | include profile picture, DOB, interests, other info that the users can themselves customize | . Database of Designs . We are going to create a Mysqlite database that will store all the designs and with this we can allow users to acsess public designs that they might want to use for their website | With the database of designs we can again expand making an AI that will create your custom button based on a wireframe | We can help people spread their desired designs | The data that will be stored includes data the design is made, author, likes and dislikes, the actual design code in css and html, ratings, and possibly more | . Public vs. Private design fetch . We will have the features of public and private designss | For public designs we will fetch all the buttons from the databse of designs that are public and allow users to use them on their site | For private designs this will be only be accessible to the author and if other users try to fetch it, it will not work | . Fetching reviews . We will have a review system on public designs so people can give their valued opinion on each design | With the review system people can improve their buttons or change it if they wish | The review system will fetch reviews from a database that will contain date the review was made, the author, likes and dislikes, and more | . .",
            "url": "http://localhost:4100/Tri3/2023/12/14/CPT-Project-Plan.html",
            "relUrl": "/2023/12/14/CPT-Project-Plan.html",
            "date": " • Dec 14, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "GitHub Overview",
            "content": "References . GitHub Review GitHub concepts 2-min . Git source control VSCode . . Create GitHub Page Repository . You will want to create a personal Github Pages blog for this class. This is a place where you can code, complete the hacks, and record what you have learned. . Git Config . Run the following commands to configure user git connection to GitHub. This is required, before pushing code to GitHub. . bash # Setup GitHub ID git config --global user.email &lt;your email&gt; git config --global user.name &lt;your github id&gt; # Verify Setup git config --list . click to Create Repository . Use Template to create student repository . | Once your repository is created, click on the green “Code” button and copy the HTTPS link provided. . | In Terminal, to your vscode directory (cd ~/vscode). Then clone the repository with git clone &lt;paste from previous step&gt;. . | Open your repository in VS Code with code &lt;repository name&gt;. Cloud Terminal requires you to open after lanuching VSCode. . | VSCode commit/sync to GitHub Pages . The VSCode saved files are only stored on your computer locally until you commit and then sync the changes. . Commit Changes, version control locally . This creates a version of your files in you local git database. Often developers commit several times before they sync in VSCode or push from command line. This allows lots of small changes that can be easily reviewed and rolled back. . Click on the button that supports “Source Control” in VS Code’s left sidebar . | Click on the plus sign to stage your changes . . | Enter a message for your commit in the message box. . | Click the “Commit button” . | Sync Changes, update change in GitHub . Sync will push files to GitHub and create an Action for GitHub Pages updates, site will update if code is without errors. . Click the Menu button and then click “Push”. . . | Watch Actions until done, open action link and review changes on github.io . | .",
            "url": "http://localhost:4100/Tri3/2023/08/26/GitHub_Sync.html",
            "relUrl": "/2023/08/26/GitHub_Sync.html",
            "date": " • Aug 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Student GitHub Pages",
            "content": "Create your own GitHub Pages Project . Make you own project from GitHub Pages Student Repo. . Make a GitHub Pages Repository . Goto GitHub student. . Reference: Create from template. Most student will pick this option. . | Reference: Fork a repo. Student in CSA that teacher has asked to contribute to student example repo will pick this. . | . Start the GitHub Pages Student Project . Run the following commands using terminal on you machine. Be sure Repo has been forked. . Clone and Open project in VSCode | Change “forkme” text with your “ghid” or selected location | . (base) id:~$ mkdir vscode # make a vscode directory, if you don&#39;t have one (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/forkme/student.git # change to your repo (base) id:~$ cd student # change to the project directory (base) id:~$ code . # open VSCode in project directory . VSCode for Python Extensions, adapt for your needs JavaScript, Python, Java . VSCode Language extensions Install Python, Python Environment Manager, Python Extension Pack, Pylance | Install Jupyter, Jupyter Keymap | Install IntelliCode, IntelliCode API Usage Examples | Windows machines install WSL Remote Development | . | . %%HTML &lt;!-- Here is a little preview of HTML to Describe VSCode Marketplace --&gt; &lt;div&gt; &lt;div style=&quot;float: left; margin: 0px 10px 10px 0px;&quot;&gt; &lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt; &lt;img alt=&quot;Extensions&quot; src=&quot;/Tri3/images/extensions.png&quot; title=&quot;VS Code Marketplace&quot; width=&quot;250&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;hr&gt; &lt;p&gt; Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. &lt;mark&gt;Before adding extensions, clone projects&lt;/mark&gt; and see what is requested or added. Here are some extension that were added through that process or that I have added... &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;mark&gt;In marketplace&lt;/mark&gt; there are several extensions for Python, Python Intellisense, Python Extension Pack &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Jupyter&lt;/mark&gt;: This supports build jupyter ipynb files from within VS Code &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Code Spell Checker&lt;/mark&gt;: Got to have it when building documents, particularly if you spell and typo like the Teacher &lt;/li&gt; &lt;li&gt; &lt;mark&gt;IntelliCode&lt;/mark&gt;: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;mark&gt;Review Details in Marketplace for better explanation of purpose of the things explained above&lt;/mark&gt;. There is a lot more! As you need Git help look at things like &lt;mark&gt;Git History and GitLens&lt;/mark&gt;. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. &lt;/p&gt; &lt;hr&gt; &lt;/div&gt; &lt;/div&gt; . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . In marketplace there are several extensions for Python, Python Intellisense, Python Extension Pack | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . Hacks . Setup Tools and test GitHub connection. Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Change index.md to show it is REALLY YOURS. Refer to Markdown Cheet Sheet. Push a minor “index.md” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “index.md” change on deployed GitHub Pages | . | .",
            "url": "http://localhost:4100/Tri3/c4.1/2023/08/21/VSCode-GitHub_Pages_IPYNB_2_.html",
            "relUrl": "/c4.1/2023/08/21/VSCode-GitHub_Pages_IPYNB_2_.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "IPYNB HTML, img",
            "content": "Create your own GitHub Pages Project . Make you own project from GitHub Pages Student Repo. . Make a GitHub Pages Repository . Goto GitHub student. . Reference: Create from template. Most student will pick this option. . | Reference: Fork a repo. Student in CSA that teacher has asked to contribute to student example repo will pick this. . | . Start the GitHub Pages Student Project . Run the following commands using terminal on you machine. Be sure Repo has been forked. . Clone and Open project in VSCode | Change “forkme” text with your “ghid” or selected location | . (base) id:~$ mkdir vscode # make a vscode directory, if you don&#39;t have one (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/forkme/student.git # change to your repo (base) id:~$ cd student # change to the project directory (base) id:~$ code . # open VSCode in project directory . VSCode for Python Extensions, adapt for your needs JavaScript, Python, Java . VSCode Language extensions Install Python, Python Environment Manager, Python Extension Pack, Pylance | Install Jupyter, Jupyter Keymap | Install IntelliCode, IntelliCode API Usage Examples | Windows machines install WSL Remote Development | . | . %%HTML &lt;!-- Here is a little preview of HTML to Describe VSCode Marketplace --&gt; &lt;div&gt; &lt;div style=&quot;float: left; margin: 0px 10px 10px 0px;&quot;&gt; &lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt; &lt;img alt=&quot;Extensions&quot; src=&quot;/Tri3/images/extensions.png&quot; title=&quot;VS Code Marketplace&quot; width=&quot;250&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;hr&gt; &lt;p&gt; Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. &lt;mark&gt;Before adding extensions, clone projects&lt;/mark&gt; and see what is requested or added. Here are some extension that were added through that process or that I have added... &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;mark&gt;In marketplace&lt;/mark&gt; there are several extensions for Python, Python Intellisense, Python Extension Pack &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Jupyter&lt;/mark&gt;: This supports build jupyter ipynb files from within VS Code &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Code Spell Checker&lt;/mark&gt;: Got to have it when building documents, particularly if you spell and typo like the Teacher &lt;/li&gt; &lt;li&gt; &lt;mark&gt;IntelliCode&lt;/mark&gt;: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;mark&gt;Review Details in Marketplace for better explanation of purpose of the things explained above&lt;/mark&gt;. There is a lot more! As you need Git help look at things like &lt;mark&gt;Git History and GitLens&lt;/mark&gt;. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. &lt;/p&gt; &lt;hr&gt; &lt;/div&gt; &lt;/div&gt; . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . In marketplace there are several extensions for Python, Python Intellisense, Python Extension Pack | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . Hacks . Setup Tools and test GitHub connection. Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Change index.md to show it is REALLY YOURS. Refer to Markdown Cheet Sheet. Push a minor “index.md” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “index.md” change on deployed GitHub Pages | . | .",
            "url": "http://localhost:4100/Tri3/c4.1/2023/08/21/HTML_Image_Hack_IPYNB_2_.html",
            "relUrl": "/c4.1/2023/08/21/HTML_Image_Hack_IPYNB_2_.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Review Ticket",
            "content": "Summary of Accomplishments . Update Blog to contain all hacks. . Reviewed with Pair. Discuss/Show evidence. | Discuss laptop, cloud computer. | Discuss tools setup and troubles. | Show personal blog / home page. | Show how you are maintaining notes, answering hacks, and showing tangibles. | How have you learned Markdown, HTML, CSS, JavaScript. | Show Jupyter Notebooks and how you have added and organized them in the blog. | Show evidence of using Slack Account, show app installed on Laptop and/or phone. Show awared of #annoncements, #general, #coding. | Run make commands to build and test blog locally, before pushing changes to GitHub pages. | Discuss GitHub Account, show ability to push/pull changes from VSCode. | Discuss development on Themes, show how you plan to organized lab notebook. | .",
            "url": "http://localhost:4100/Tri3/2023/08/21/GitHub_Pages_Tangibles.html",
            "relUrl": "/2023/08/21/GitHub_Pages_Tangibles.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "More Detail Plan",
            "content": "PBL Unit 1 / Week 1 . Learning outcome. Building a personal and running GitHub Pages. . Monday: Schedule Live Review - 4 minutes. Finish Tools setup. Attend Office Hours on HTML, CSS, JS and Student Blog. | Tuesday: Read Markdown Student Page, Attend Office Hours on Updating Home Page and Plan Page. | Wednesday: Work Plan Page and Home Page. Prep with pair on live review. | Thursday: 10:45 live review per Canvas. Read Linux Shell and Bash. Tranfer blog and customize for my lab notebook. | . Pair Planning Meeting . Update Blog to contain all hacks. Review week with Pair and look ahead and start plan for next week. Try to be done and learn your machine before Monday EOD. . A laptop, that you bring to class every day with ability to operate Development Tools on it or within the Cloud. | GitHub Account, VSCode will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal blog: containing notes, answering hacks, and showing tangibles. Building pages will teach Markdown, HTML, CSS, JavaScript and more. | Jupyter Notebooks will be used in conjunction with GitHub Pages to build running Code in your blog. | Slack Account, install the App on Laptop and/or phone, get used to reading announcements. Slack is the tool that we will use for messaging, we have been averaging 1000s of essages each year. | VSCode is the code editor we will be using in this class. VSCode is more than and editor, this type of tool is often called an Interactive Development Environment (IDE). | Run make commands to build and test blog locally, before pushing changes to GitHub pages. | .",
            "url": "http://localhost:4100/Tri3/2023/08/21/GitHub_Pages_Plans.html",
            "relUrl": "/2023/08/21/GitHub_Pages_Plans.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "GitHub Pages",
            "content": "PBL Unit 1 / Week 1 . Learning outcome. Building a personal and running GitHub Pages. . Monday: Schedule Live Review - 4 minutes. Finish Tools setup. Attend Office Hours on HTML, CSS, JS and Student Blog. | Tuesday: Read Markdown Student Page, Attend Office Hours on Updating Home Page and Plan Page. | Wednesday: Work Plan Page and Home Page. Prep with pair on live review. | Thursday: 10:45 live review per Canvas. Read Linux Shell and Bash. Tranfer blog and customize for my lab notebook. | Update Blog to contain all hacks. Review week with Pair and look ahead and start plan for next week. | .",
            "url": "http://localhost:4100/Tri3/c1.4/2023/08/21/GitHub_Pages.html",
            "relUrl": "/c1.4/2023/08/21/GitHub_Pages.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "IPYNB Table, Code",
            "content": "Learning College Board Pseudo Code . College Board uses a kind-of programming language in its Multiple Choice exam. There are thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, a non operational programming language, to highlight concepts that it wants every student to learn. . College Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum. . College Board Pseudo Code Exam Reference Sheet . Comparison of CB Pseudo Code to Python with descriptions . Command Vocabulary | Pseudo code | Python | Purpose | . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection | . Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. | . Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. | . Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . Pseudo code IF Code Block . a ← 1 b ← 1 IF (a = b) { DISPLAY(&quot;A equals B&quot;) } . # Python code if block to match Pseudo Code a = 1 b = 1 if (a == b): # Python uses indent to establish code block, Teacher use tab key print(&quot;A equals B&quot;) . A equals B . Hacks . Key Learnings. It is very important that you become fluent in “ Vocabulary” and researching problems. . Code a JavaScript cell, this must start with %%js%% in first line of cell. Match the IF condition example in this blog. . | Code a REPEAT n TIMES as described in comparison sheet in Pseudo code, Python, and JavaScript. Be sure to comment your code. REPEAT 100 TIMES | Sum all the numpers | PRINT the result | . | Reflect on our PSEUDO code and how it helped with your problem solving in these hacks. . | Maked efinition for: code block, sequence, selections, iteration. Consider a strategy to remember Pseudo Code, Python and JavaScript for these definitions. | .",
            "url": "http://localhost:4100/Tri3/2023/08/17/Markdown_Table_Code_Hack_IPYNB_2_.html",
            "relUrl": "/2023/08/17/Markdown_Table_Code_Hack_IPYNB_2_.html",
            "date": " • Aug 17, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "College Board Pseudo Code",
            "content": "Learning College Board Pseudo Code . College Board uses a kind-of programming language in its Multiple Choice exam. There are thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, a non operational programming language, to highlight concepts that it wants every student to learn. . College Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum. . College Board Pseudo Code Exam Reference Sheet . Comparison of CB Pseudo Code to Python with descriptions . Command Vocabulary | Pseudo code | Python | Purpose | . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection | . Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. | . Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. | . Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . Pseudo code IF Code Block . a ← 1 b ← 1 IF (a = b) { DISPLAY(&quot;A equals B&quot;) } . # Python code if block to match Pseudo Code a = 1 b = 1 if (a == b): # Python uses indent to establish code block, Teacher use tab key print(&quot;A equals B&quot;) . Hacks . Key Learnings. It is very important that you become fluent in “ Vocabulary” and researching problems. . Code a JavaScript cell, this must start with %%js%% in first line of cell. Match the IF condition example in this blog. . | Code a REPEAT n TIMES as described in comparison sheet in Pseudo code, Python, and JavaScript. Be sure to comment your code. REPEAT 100 TIMES | Sum all the numpers | PRINT the result | . | Reflect on our PSEUDO code and how it helped with your problem solving in these hacks. . | Maked efinition for: code block, sequence, selections, iteration. Consider a strategy to remember Pseudo Code, Python and JavaScript for these definitions. | .",
            "url": "http://localhost:4100/Tri3/2023/08/17/AP-pseudo-vs-python_IPYNB_2_.html",
            "relUrl": "/2023/08/17/AP-pseudo-vs-python_IPYNB_2_.html",
            "date": " • Aug 17, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Tool References",
            "content": "Visual Studio Code Overview . Jupyter Notebooks Review Jupyter basics 6-min . WSL Basic Commands . Linux Commands Cheat Sheet . Docker Docker Overview .",
            "url": "http://localhost:4100/Tri3/2023/08/16/Tools_Help.html",
            "relUrl": "/2023/08/16/Tools_Help.html",
            "date": " • Aug 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Prunned Tool Procedure ...",
            "content": "Hacks . Complete the procedure below accurately. These are absolutely required and must be 100% accurate for your success. . GitHub Account . Follow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account Use your own personal/permanent email… NOT SCHOOL!!! GitHub account belongs to you. | . MacOS 1st Time Developer . VSCode install . Install VSCode | . Anaconda install . Download for MacOS: Anaconda | Run Install: Answer yes to questions | . Homebrew install . Copy and Paste to Install from Terminal Homebrew Copy bash ... curl ... command using copy box on website | Launch terminal from search bar | Paste bash ... curl ... command into Terminal … | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called “brew” which helps add and manage developer packages on MacOS. | . At this point, the next task is to prepare tools. You must start a new Terminal. Now the Terminal prompt should be prefixed with (base). If not, you need to go back to Anaconda install. . Open new Terminal, your prompt should look like this… (base) iMac:~ jmort1021$ . | . Key Packages needed on MacOS . Close and Start a new terminal, run each command in Terminal $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed . Windows 1st Time Developer . VSCode install using WSL. Windows users have option to have best of Windows and Linux while developing within VSCode. . | Install VSCode using WSL. | Required review, become familiar with Windows WSL development | . Anaconda install on WSL. . Try the exact commands in WSL Command / Powershell. | Only if there is a wget error… To find the latest Linux-x86 distribution hover over 64-Bit (x86) Installer of this page: https://www.anaconda.com/download#downloads. Hover over wget and Anaconda3 commands based on new link. PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh $ chmod +x Anaconda3-2023.03-1-Linux-x86_64.sh # Answer yes to all the prompts $ ./Anaconda3-2023.03-1-Linux-x86_64.sh . | . At this point, the next task is to prepare for Packages, Jupyter Notebooks, and Kernels. You must start a new WSL Command / Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, you need to go back to Anaconda install. . Open Command / Powershell. If you are not looking like this you need to back up. PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files . | . Key Packages needing update on WSL Ubuntu . In a WSL Command / Powershell install Python3 bash $ sudo apt list # list packages $ sudo apt update # update package list $ sudo apt upgrade # upgrade packages $ sudo apt install python3 python3-pip # install python3 and pip3 for development $ python –version # version of python3 should be shown | . Jupyter Install and Kernels (MacOs and WSL) . Install Jupyter and check python kernel . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 .",
            "url": "http://localhost:4100/Tri3/2023/08/16/Tools_Hacks_Sample.html",
            "relUrl": "/2023/08/16/Tools_Hacks_Sample.html",
            "date": " • Aug 16, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "VSCode, Python, Jupyter, ...",
            "content": "Hacks . Complete the procedure below accurately. These are absolutely required and must be 100% accurate for your success. . GitHub Account . Follow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account Use your own personal/permanent email… NOT SCHOOL!!! GitHub account belongs to you. | . MacOS 1st Time Developer . VSCode install . Install VSCode | . Anaconda install . Download for MacOS: Anaconda | Run Install: Answer yes to questions | . Homebrew install . Copy and Paste to Install from Terminal Homebrew Copy bash ... curl ... command using copy box on website | Launch terminal from search bar | Paste bash ... curl ... command into Terminal … | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called “brew” which helps add and manage developer packages on MacOS. | . At this point, the next task is to prepare tools. You must start a new Terminal. Now the Terminal prompt should be prefixed with (base). If not, you need to go back to Anaconda install. . Open new Terminal, your prompt should look like this… (base) iMac:~ jmort1021$ . | . Key Packages needed on MacOS . Close and Start a new terminal, run each command in Terminal $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed . Windows 1st Time Developer . VSCode install using WSL. Windows users have option to have best of Windows and Linux while developing within VSCode. . | Install VSCode using WSL. | Required review, become familiar with Windows WSL development | . Anaconda install on WSL. . Try the exact commands in WSL Command / Powershell. | Only if there is a wget error… To find the latest Linux-x86 distribution hover over 64-Bit (x86) Installer of this page: https://www.anaconda.com/download#downloads. Hover over wget and Anaconda3 commands based on new link. PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh $ chmod +x Anaconda3-2023.03-1-Linux-x86_64.sh # Answer yes to all the prompts $ ./Anaconda3-2023.03-1-Linux-x86_64.sh . | . At this point, the next task is to prepare for Packages, Jupyter Notebooks, and Kernels. You must start a new WSL Command / Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, you need to go back to Anaconda install. . Open Command / Powershell. If you are not looking like this you need to back up. PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files . | . Key Packages needing update on WSL Ubuntu . In a WSL Command / Powershell install Python3 bash $ sudo apt list # list packages $ sudo apt update # update package list $ sudo apt upgrade # upgrade packages $ sudo apt install python3 python3-pip # install python3 and pip3 for development $ python –version # version of python3 should be shown | . Jupyter Install and Kernels (MacOs and WSL) . Install Jupyter and check python kernel . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 .",
            "url": "http://localhost:4100/Tri3/2023/08/16/Tools_Equipment.html",
            "relUrl": "/2023/08/16/Tools_Equipment.html",
            "date": " • Aug 16, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Tools Setup",
            "content": "PBL Unit 1 / Week 0 . Learning outcome. Installing Tools and showing usage of VSCode. . Wednesday - Pick pair share partner, Pick crossover pair, Establish team of four. Spend some time talking and getting to know each other, particularly with Computer Science experience and goals. You should be matched with someone that has similar experience. | Thursday - Setup Tools on laptop and/or Cloud Computer. | Friday - Review and test as a Pair. Spend 25 minutes at one keyboard then switch for next 25 minutes. | . Hack Prepartation . Look for ‘Hacks’ to know what to do next. Try to be done and learn your machine before Monday EOD. . A laptop, that you bring to class every day with ability to operate Development Tools on it or within the Cloud. | GitHub Account, VSCode will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal blog: containing notes, answering hacks, and showing tangibles. Building pages will teach Markdown, HTML, CSS, JavaScript and more. | Jupyter Notebooks will be used in conjunction with GitHub Pages to build running Code in your blog. | Slack Account, install the App on Laptop and/or phone, get used to reading announcements. Slack is the tool that we will use for messaging, we have been averaging 1000s of essages each year. | VSCode is the code editor we will be using in this class. VSCode is more than and editor, this type of tool is often called an Interactive Development Environment (IDE). | Run make commands to build and test blog locally, before pushing changes to GitHub pages. | .",
            "url": "http://localhost:4100/Tri3/c1.4/2023/08/15/Tools_Sprint.html",
            "relUrl": "/c1.4/2023/08/15/Tools_Sprint.html",
            "date": " • Aug 15, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Daily Plan Sample",
            "content": "PBL Unit 1 / Week 0 . Learning outcome. Installing Tools and showing usage of VSCode. . Wednesday - Pick pair share partner, Pick crossover pair, Establish team of four. Spend some time talking and getting to know each other, particularly with Computer Science experience and goals. You should be matched with someone that has similar experience. | Thursday - Setup Tools on laptop and/or Cloud Computer. | Friday - Review and test as a Pair. Spend 25 minutes at one keyboard then switch for next 25 minutes. | .",
            "url": "http://localhost:4100/Tri3/2023/08/15/Tools_Plans_Sample.html",
            "relUrl": "/2023/08/15/Tools_Plans_Sample.html",
            "date": " • Aug 15, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Design Search Page",
            "content": "",
            "url": "http://localhost:4100/Tri3/2023/02/05/DesignSearch.html",
            "relUrl": "/2023/02/05/DesignSearch.html",
            "date": " • Feb 5, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "Testing .",
          "url": "http://localhost:4100/Tri3/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  

  

  
  

  
  

}